

-------TASK 3 ---------

-- 1 - SQL query to retrieve a list of all orders along with customer information (e.g.,customer name) for each order
USE TechShop;
SELECT
    Orders.OrderID, Orders.OrderDate, Customers.FirstName,
    Customers.LastName ,
    Orders.TotalAmount
FROM Orders
    JOIN Customers
    ON 
    Orders.CustomerID = Customers.CustomerID;
GO



-- 2 - SQL query to find the total revenue generated by each electronic gadget product.Include the product name and the total revenue.

SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM OrderDetails
    JOIN Products
    ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;
GO




--3 - SQL query to list all customers who have made at least one purchase. Include their names and contact information. 


SELECT DISTINCT
    Customers.FirstName, Customers.LastName,
    Customers.Email, Customers.Phone, Customers.Address
FROM Customers
    JOIN Orders
    ON Customers.CustomerID = Orders.CustomerID;
GO




--4 -SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered.

SELECT TOP 1
    Products.ProductName, SUM(OrderDetails.Quantity)
     AS TotalQuantityOrdered
FROM OrderDetails
    JOIN Products
    ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName
ORDER BY TotalQuantityOrdered DESC;
GO





-- 5 SQL query to retrieve a list of electronic gadgets along with their corresponding categories.

SELECT ProductName, Description
FROM Products;
GO



-- 6 - SQL query to calculate the average order value for each customer. Include the customer's name and their average order value

SELECT Customers.FirstName, Customers.LastName, AVG(Orders.TotalAmount) AS AverageOrderValue
FROM Orders
    JOIN Customers
    ON Orders.CustomerID = Customers.CustomerID
GROUP BY Customers.FirstName, Customers.LastName;
GO



--7 - SQL query to find the order with the highest total revenue. Include the order ID, customer information, and the total revenue.

SELECT TOP 1
    Orders.OrderID, Customers.FirstName, Customers.LastName,
    Orders.TotalAmount AS TotalRevenue
FROM Orders
    JOIN Customers
    ON Orders.CustomerID = Customers.CustomerID
ORDER BY TotalRevenue DESC;
GO





--8- SQL query to list electronic gadgets and the number of times each product has been  ordered.

SELECT Products.ProductName, COUNT(OrderDetails.ProductID) AS NumberOfOrders
FROM OrderDetails
    JOIN Products
    ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;
GO




-- 9 QL query to find customers who have purchased a specific electronic gadget product. Allow users to input the product name as a parameter.
CREATE PROCEDURE FindCustomersByProduct
    @ProductName NVARCHAR(50)
AS
BEGIN
    SELECT Customers.FirstName, Customers.LastName, Customers.Email, Customers.Phone, Customers.Address
    FROM Customers
        JOIN Orders
        ON Customers.CustomerID = Orders.CustomerID
        JOIN OrderDetails
        ON Orders.OrderID = OrderDetails.OrderID
        JOIN Products
        ON OrderDetails.ProductID = Products.ProductID
    WHERE Products.ProductName = @ProductName;
END;
GO


EXEC FindCustomersByProduct @ProductName = 'Printer';
GO





--  10 SQL query to calculate the total revenue generated by all orders placed within a specific time period. Allow users to input the start and end dates as parameters. 

CREATE PROCEDURE CalculateTotalRevenueByDateRange
    @StartDate DATETIME,
    @EndDate DATETIME
AS
BEGIN
    SELECT SUM(Orders.TotalAmount) AS TotalRevenue
    FROM Orders
    WHERE Orders.OrderDate BETWEEN @StartDate AND @EndDate;
END;
GO

-- Execute the stored procedure to calculate the total revenue generated by all orders placed within a specific time period
EXEC CalculateTotalRevenueByDateRange 
@StartDate = '2021-01-05', @EndDate = '2021-01-07';

